import { useState } from 'react'
import Head from 'next/head'
import { useQuery, useMutation } from '@apollo/client'
import { GET_REPOSITORIES, ADD_STAR_MUTATION, REMOVE_STAR_MUTATION } from '@/graphql/schema'
import { Grid, Container, Card, Text, ActionIcon, Button } from '@mantine/core'
import { useStyles } from '@/styles/homeStyle'
import Link from 'next/link'
import {
  IconLink,
  IconStar,
  IconArrowLeft,
  IconArrowRight,
  IconStarFilled,
} from '@tabler/icons-react'
import SkeletonRepos from '@/components/SkeletonRepos'
import { HeaderSimple } from '@/components/Header'

type Color = string

interface nodeValue {
  id: string
  name: string
  stargazerCount: string
  url: URL
  viewerHasStarred: Boolean
  primaryLanguage: {
    color: Color
    name: string
  }
}

export default function Home() {
  const { classes } = useStyles()
  const [before, setBefore] = useState<null | Number>(null)
  const [after, setAfter] = useState<null | Number>(null)
  const [first, setFirst] = useState<null | Number>(12)
  const [last, setLast] = useState<null | Number>(null)

  const [addStar] = useMutation(ADD_STAR_MUTATION)
  const [removeStar] = useMutation(REMOVE_STAR_MUTATION)

  const { loading, error, data, refetch } = useQuery(GET_REPOSITORIES, {
    variables: {
      login: 'Dan6erbond',
      ownerAffiliations: 'OWNER',
      orderBy: {
        direction: 'DESC',
        field: 'CREATED_AT',
      },
      first: first,
      last: last,
      after: after,
      before: before,
    },
  })

  const clickStar = async (id: String, starred: Boolean) => {
    if (starred) {
      await removeStar({
        variables: {
          id: id,
        },
      })
    } else {
      await addStar({
        variables: {
          id: id,
        },
      })
    }
    refetch()
  }

  const nextPage = () => {
    setBefore(null)
    setLast(null)
    setFirst(12)
    setAfter(data?.user.repositories.pageInfo.endCursor)
  }

  const prevPage = () => {
    setAfter(null)
    setFirst(null)
    setLast(12)
    setBefore(data?.user.repositories.pageInfo.startCursor)
  }

  return (
    <>
      <Head>
        <title>Home Page</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <HeaderSimple />
        <Container my='lg' size={'lg'}>
          <Text sx={{ textAlign: 'center', fontSize: '30px', marginBottom: '20px' }}>
            {"Dan6erbond's repositories"}
          </Text>
          <Grid>
            {!loading && !error && data ? (
              <>
                {data.user.repositories.nodes.map((node: nodeValue, index: any) => {
                  return (
                    <Grid.Col xs={6} md={4} key={index}>
                      <Card withBorder p='xl' radius='md' className={classes.card}>
                        <Card.Section>
                          <Link className={classes.link} href={node.url}>
                            <IconLink className={classes.linkIcon} />
                            {node.name}
                          </Link>
                        </Card.Section>
                        <Card.Section className={classes.footer}>
                          <div className={classes.primaryLanguage}>
                            <span
                              className={classes.languageIcon}
                              style={{ backgroundColor: node.primaryLanguage?.color }}
                            ></span>
                            {node.primaryLanguage?.name}
                          </div>

                          <div className={classes.stargazer}>
                            <ActionIcon
                              variant='transparent'
                              onClick={() => clickStar(node.id, node.viewerHasStarred)}
                            >
                              {node.viewerHasStarred ? (
                                <IconStarFilled className={classes.starIcon} />
                              ) : (
                                <IconStar className={classes.starIcon} />
                              )}
                            </ActionIcon>
                            <Text>{node.stargazerCount}</Text>
                          </div>
                        </Card.Section>
                      </Card>
                    </Grid.Col>
                  )
                })}
              </>
            ) : (
              <SkeletonRepos />
            )}
            <Grid className={classes.paginate}>
              <Button
                leftIcon={<IconArrowLeft />}
                className={classes.button}
                variant='outline'
                onClick={prevPage}
                disabled={!data?.user.repositories.pageInfo.hasPreviousPage}
              >
                Previous
              </Button>
              <Button
                rightIcon={<IconArrowRight />}
                className={classes.button}
                variant='outline'
                onClick={nextPage}
                disabled={!data?.user.repositories.pageInfo.hasNextPage}
              >
                Next
              </Button>
            </Grid>
          </Grid>
        </Container>
      </main>
    </>
  )
}
